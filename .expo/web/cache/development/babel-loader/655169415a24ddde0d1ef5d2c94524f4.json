{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Documents\\\\DESN2000\\\\app_stuff\\\\node_modules\\\\react-native-ios-kit\\\\src\\\\components\\\\Switch.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ReactNativeSwitch from \"react-native-web/dist/exports/Switch\";\nimport { withTheme } from \"../core/theming\";\n\nvar Switch = function (_Component) {\n  _inherits(Switch, _Component);\n\n  var _super = _createSuper(Switch);\n\n  function Switch() {\n    _classCallCheck(this, Switch);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Switch, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          onValueChange = _this$props.onValueChange,\n          trackColor = _this$props.trackColor,\n          rest = _objectWithoutProperties(_this$props, [\"theme\", \"onValueChange\", \"trackColor\"]);\n\n      return React.createElement(ReactNativeSwitch, _extends({}, rest, {\n        onValueChange: onValueChange,\n        trackColor: trackColor || theme.positiveColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return Switch;\n}(Component);\n\nexport default withTheme(Switch);","map":{"version":3,"sources":["D:/Documents/DESN2000/app_stuff/node_modules/react-native-ios-kit/src/components/Switch.js"],"names":["React","Component","withTheme","Switch","props","theme","onValueChange","trackColor","rest","positiveColor"],"mappings":";;;;;;;;;;;;;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAGA,SAASC,SAAT;;IAoBMC,M;;;;;;;;;;;;;6BACK;AAAA,wBAC+C,KAAKC,KADpD;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,aADR,eACQA,aADR;AAAA,UACuBC,UADvB,eACuBA,UADvB;AAAA,UACsCC,IADtC;;AAEP,aACE,oBAAC,iBAAD,eACMA,IADN;AAEE,QAAA,aAAa,EAAEF,aAFjB;AAIE,QAAA,UAAU,EAAEC,UAAU,IAAIF,KAAK,CAACI,aAJlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAQD;;;;EAXkBR,S;;AAcrB,eAAeC,SAAS,CAACC,MAAD,CAAxB","sourcesContent":["/* @flow */\r\n\r\nimport React, { Component } from 'react';\r\nimport { Switch as ReactNativeSwitch } from 'react-native';\r\n\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types/Theme';\r\n\r\ntype Props = {\r\n  // Disable switch\r\n  disabled?: boolean,\r\n  // Switch value\r\n  value?: boolean,\r\n  // Switch style\r\n  style?: Object,\r\n  // Provided by the ThemeProvider\r\n  theme: Theme,\r\n  // onChange prop\r\n  onValueChange?: (value: boolean) => *,\r\n  // Border color when the switch is turned on\r\n  trackColor?: string,\r\n  // Color of the foreground switch grip\r\n  thumbColor?: string,\r\n};\r\n\r\nclass Switch extends Component<Props> {\r\n  render() {\r\n    const { theme, onValueChange, trackColor, ...rest } = this.props;\r\n    return (\r\n      <ReactNativeSwitch\r\n        {...rest}\r\n        onValueChange={onValueChange}\r\n        // $FlowFixMe\r\n        trackColor={trackColor || theme.positiveColor}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTheme(Switch);\r\n"]},"metadata":{},"sourceType":"module"}