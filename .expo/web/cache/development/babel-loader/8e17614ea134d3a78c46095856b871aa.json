{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Documents\\\\DESN2000\\\\app_stuff\\\\node_modules\\\\react-native-ios-kit\\\\src\\\\components\\\\Button.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { withTheme } from \"../\";\n\nvar Button = function (_React$Component) {\n  _inherits(Button, _React$Component);\n\n  var _super = _createSuper(Button);\n\n  function Button(props) {\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    _this = _super.call(this, props);\n    _this.styles = getStyles(_this.props.theme);\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"_styleFromProps\",\n    value: function _styleFromProps() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          centered = _this$props.centered,\n          rounded = _this$props.rounded,\n          inverted = _this$props.inverted,\n          color = _this$props.color,\n          disabled = _this$props.disabled;\n      var styleFromProps = [];\n      var appliedStyleProps = {\n        centered: centered,\n        rounded: rounded,\n        disabled: disabled,\n        inverted: inverted\n      };\n      Object.keys(appliedStyleProps).forEach(function (key) {\n        var value = appliedStyleProps[key];\n\n        if (value) {\n          styleFromProps[styleFromProps.length] = _this2.styles[key];\n        }\n      });\n\n      if (disabled && rounded) {\n        styleFromProps[styleFromProps.length] = inverted ? this.styles.invertedDisabled : this.styles.roundedDisabled;\n      }\n\n      if (color && !disabled) {\n        styleFromProps[styleFromProps.length] = {\n          inner: {\n            color: color\n          }\n        };\n      }\n\n      return {\n        inner: styleFromProps.map(function (style) {\n          return style.inner;\n        }),\n        container: styleFromProps.map(function (style) {\n          return style.container;\n        })\n      };\n    }\n  }, {\n    key: \"_renderButton\",\n    value: function _renderButton(markup) {\n      if (this.props.inline) {\n        var wrapperStyle = {\n          flexDirection: 'row'\n        };\n\n        if (this.props.centered) {\n          wrapperStyle.justifyContent = 'center';\n        }\n\n        return React.createElement(View, {\n          style: wrapperStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 14\n          }\n        }, markup);\n      }\n\n      return markup;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$_styleFromProps = this._styleFromProps(),\n          inner = _this$_styleFromProps.inner,\n          container = _this$_styleFromProps.container;\n\n      var children = typeof this.props.children === 'string' ? React.createElement(Text, {\n        style: [this.styles.default.inner].concat(_toConsumableArray(inner), [this.props.innerStyle]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }\n      }, this.props.children) : this.props.children;\n      return this._renderButton(React.createElement(TouchableOpacity, {\n        disabled: this.props.disabled,\n        onPress: this.props.onPress,\n        onPressIn: this.props.onPressIn,\n        onPressOut: this.props.onPressOut,\n        onLongPress: this.props.onLongPress,\n        accessibilityRole: \"button\",\n        testID: this.props.testID,\n        style: [this.styles.default.container].concat(_toConsumableArray(container), [this.props.style, this.props.disabledStyle]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 7\n        }\n      }, children));\n    }\n  }]);\n\n  return Button;\n}(React.Component);\n\nvar getStyles = function getStyles(theme) {\n  var primaryColor = theme.primaryColor,\n      disabledColor = theme.disabledColor;\n  return {\n    default: StyleSheet.create({\n      inner: {\n        textAlign: 'left',\n        fontWeight: 'normal',\n        fontSize: 17,\n        color: primaryColor\n      }\n    }),\n    disabled: {\n      inner: {\n        color: disabledColor\n      }\n    },\n    centered: StyleSheet.create({\n      inner: {\n        textAlign: 'center'\n      }\n    }),\n    rounded: StyleSheet.create({\n      inner: {\n        fontSize: 14,\n        textAlign: 'center'\n      },\n      container: {\n        borderWidth: 1,\n        borderColor: primaryColor,\n        borderRadius: 8,\n        justifyContent: 'center',\n        padding: 10\n      }\n    }),\n    roundedDisabled: StyleSheet.create({\n      container: {\n        borderColor: disabledColor\n      }\n    }),\n    inverted: StyleSheet.create({\n      inner: {\n        color: '#ffffff'\n      },\n      container: {\n        backgroundColor: primaryColor\n      }\n    }),\n    invertedDisabled: StyleSheet.create({\n      container: {\n        backgroundColor: disabledColor,\n        borderColor: disabledColor\n      }\n    })\n  };\n};\n\nexport default withTheme(Button);","map":{"version":3,"sources":["D:/Documents/DESN2000/app_stuff/node_modules/react-native-ios-kit/src/components/Button.js"],"names":["React","withTheme","Button","props","styles","getStyles","theme","centered","rounded","inverted","color","disabled","styleFromProps","appliedStyleProps","Object","keys","forEach","key","value","length","invertedDisabled","roundedDisabled","inner","map","style","container","markup","inline","wrapperStyle","flexDirection","justifyContent","_styleFromProps","children","default","innerStyle","_renderButton","onPress","onPressIn","onPressOut","onLongPress","testID","disabledStyle","Component","primaryColor","disabledColor","StyleSheet","create","textAlign","fontWeight","fontSize","borderWidth","borderColor","borderRadius","padding","backgroundColor"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport { StyleSheet, View, TouchableOpacity, Text } from 'react-native';\r\n\r\nimport type { Theme } from '../types/Theme';\r\nimport type {\r\n  TextStyleProp,\r\n  ViewStyleProp,\r\n} from 'react-native/Libraries/StyleSheet/StyleSheet';\r\nimport { withTheme } from '../';\r\n\r\ntype Props = {\r\n  /**\r\n   * Set custom font color\r\n   */\r\n  color?: string,\r\n  /**\r\n   * Disable the button\r\n   */\r\n  disabled?: boolean,\r\n  /**\r\n   * Disable automatic horizontal resize\r\n   * The button will only occupy width it needs, instead of 100%\r\n   */\r\n  inline?: boolean,\r\n  /**\r\n   * Center text inside the button\r\n   * Applies only if rounded prop is not true\r\n   */\r\n  centered?: boolean,\r\n  /**\r\n   * Set rounded border corners\r\n   */\r\n  rounded?: boolean,\r\n  /**\r\n   * Invert font color with background color\r\n   * Applies only if rounded prop is true\r\n   */\r\n  inverted?: boolean,\r\n  /**\r\n   * Function to call when the touch is released\r\n   */\r\n  onPress?: () => void,\r\n  onPressIn?: () => void,\r\n  onPressOut?: () => void,\r\n  onLongPress?: () => void,\r\n  /**\r\n   * Global theme to use\r\n   */\r\n  theme: Theme,\r\n  /**\r\n   * Custom styles to apply to the button\r\n   */\r\n  style?: ViewStyleProp,\r\n  /**\r\n   * Custom styles to apply to text inside the button\r\n   */\r\n  innerStyle?: TextStyleProp,\r\n  /**\r\n   * Custom styles to apply to the button\r\n   */\r\n  disabledStyle?: ViewStyleProp,\r\n  children: React.Element<*> | React.Element<*>[] | string,\r\n  /**\r\n   * Used to locate the item for end to end tests\r\n   */\r\n  testID?: string,\r\n};\r\n\r\nclass Button extends React.Component<Props> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.styles = getStyles(this.props.theme);\r\n  }\r\n\r\n  styles: Object;\r\n\r\n  _styleFromProps() {\r\n    const { centered, rounded, inverted, color, disabled } = this.props;\r\n    const styleFromProps: Object[] = [];\r\n\r\n    const appliedStyleProps = {\r\n      centered,\r\n      rounded,\r\n      disabled,\r\n      inverted,\r\n    };\r\n\r\n    Object.keys(appliedStyleProps).forEach(key => {\r\n      const value = appliedStyleProps[key];\r\n      if (value) {\r\n        styleFromProps[styleFromProps.length] = this.styles[key];\r\n      }\r\n    });\r\n\r\n    if (disabled && rounded) {\r\n      styleFromProps[styleFromProps.length] = inverted\r\n        ? this.styles.invertedDisabled\r\n        : this.styles.roundedDisabled;\r\n    }\r\n\r\n    if (color && !disabled) {\r\n      styleFromProps[styleFromProps.length] = {\r\n        inner: { color },\r\n      };\r\n    }\r\n\r\n    return {\r\n      inner: styleFromProps.map(style => style.inner),\r\n      container: styleFromProps.map(style => style.container),\r\n    };\r\n  }\r\n\r\n  _renderButton(markup) {\r\n    if (this.props.inline) {\r\n      const wrapperStyle = {\r\n        flexDirection: 'row',\r\n      };\r\n      if (this.props.centered) {\r\n        // $FlowFixMe\r\n        wrapperStyle.justifyContent = 'center';\r\n      }\r\n      return <View style={wrapperStyle}>{markup}</View>;\r\n    }\r\n    return markup;\r\n  }\r\n\r\n  render() {\r\n    const { inner, container } = this._styleFromProps();\r\n\r\n    const children =\r\n      typeof this.props.children === 'string' ? (\r\n        <Text\r\n          style={[this.styles.default.inner, ...inner, this.props.innerStyle]}\r\n        >\r\n          {this.props.children}\r\n        </Text>\r\n      ) : (\r\n        this.props.children\r\n      );\r\n\r\n    return this._renderButton(\r\n      <TouchableOpacity\r\n        disabled={this.props.disabled}\r\n        onPress={this.props.onPress}\r\n        onPressIn={this.props.onPressIn}\r\n        onPressOut={this.props.onPressOut}\r\n        onLongPress={this.props.onLongPress}\r\n        accessibilityRole=\"button\"\r\n        testID={this.props.testID}\r\n        style={[\r\n          this.styles.default.container,\r\n          ...container,\r\n          this.props.style,\r\n          this.props.disabledStyle,\r\n        ]}\r\n      >\r\n        {children}\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n}\r\n\r\nconst getStyles = (theme: Theme) => {\r\n  const { primaryColor, disabledColor } = theme;\r\n\r\n  return {\r\n    default: StyleSheet.create({\r\n      inner: {\r\n        textAlign: 'left',\r\n        fontWeight: 'normal',\r\n        fontSize: 17,\r\n        color: primaryColor,\r\n      },\r\n    }),\r\n    disabled: {\r\n      inner: {\r\n        color: disabledColor,\r\n      },\r\n    },\r\n    centered: StyleSheet.create({\r\n      inner: {\r\n        textAlign: 'center',\r\n      },\r\n    }),\r\n    rounded: StyleSheet.create({\r\n      inner: {\r\n        fontSize: 14,\r\n        textAlign: 'center',\r\n      },\r\n      container: {\r\n        borderWidth: 1,\r\n        borderColor: primaryColor,\r\n        borderRadius: 8,\r\n        justifyContent: 'center',\r\n        padding: 10,\r\n      },\r\n    }),\r\n    roundedDisabled: StyleSheet.create({\r\n      container: {\r\n        borderColor: disabledColor,\r\n      },\r\n    }),\r\n    inverted: StyleSheet.create({\r\n      inner: {\r\n        color: '#ffffff',\r\n      },\r\n      container: {\r\n        backgroundColor: primaryColor,\r\n      },\r\n    }),\r\n    invertedDisabled: StyleSheet.create({\r\n      // eslint-disable-next-line react-native/no-unused-styles\r\n      container: {\r\n        backgroundColor: disabledColor,\r\n        borderColor: disabledColor,\r\n      },\r\n    }),\r\n  };\r\n};\r\n\r\nexport default withTheme(Button);\r\n"]},"metadata":{},"sourceType":"module"}