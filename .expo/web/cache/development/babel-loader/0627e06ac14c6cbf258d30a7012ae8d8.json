{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Documents\\\\DESN2000\\\\app_stuff\\\\node_modules\\\\react-native-ios-kit\\\\src\\\\components\\\\TextField.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { withTheme } from \"../\";\nimport Icon from \"./Icon\";\n\nvar TextField = function (_React$Component) {\n  _inherits(TextField, _React$Component);\n\n  var _super = _createSuper(TextField);\n\n  function TextField() {\n    var _this;\n\n    _classCallCheck(this, TextField);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.clearInput = function () {\n      return _this.props.onValueChange && _this.props.onValueChange('');\n    };\n\n    return _this;\n  }\n\n  _createClass(TextField, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          placeholder = _this$props.placeholder,\n          onValueChange = _this$props.onValueChange,\n          clearButton = _this$props.clearButton,\n          _this$props$theme = _this$props.theme,\n          backgroundColor = _this$props$theme.backgroundColor,\n          dividerColor = _this$props$theme.dividerColor,\n          placeholderColor = _this$props$theme.placeholderColor,\n          primaryColor = _this$props$theme.primaryColor,\n          textColor = _this$props$theme.textColor,\n          containerStyle = _this$props.containerStyle,\n          inputStyle = _this$props.inputStyle,\n          rest = _objectWithoutProperties(_this$props, [\"value\", \"placeholder\", \"onValueChange\", \"clearButton\", \"theme\", \"containerStyle\", \"inputStyle\"]);\n\n      return React.createElement(View, {\n        style: [{\n          backgroundColor: backgroundColor,\n          borderBottomColor: dividerColor\n        }, styles.container, containerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, _extends({}, rest, {\n        value: value,\n        placeholder: placeholder,\n        placeholderTextColor: placeholderColor,\n        onChangeText: onValueChange,\n        style: [styles.input, {\n          color: textColor\n        }, inputStyle],\n        selectionColor: primaryColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      })), value && clearButton !== false ? React.createElement(TouchableOpacity, {\n        onPress: this.clearInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }, React.createElement(Icon, {\n        name: \"ios-close-circle\",\n        color: placeholderColor,\n        style: styles.clearIcon,\n        size: 18,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      })) : null);\n    }\n  }]);\n\n  return TextField;\n}(React.Component);\n\nexport default withTheme(TextField);\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 12,\n    paddingHorizontal: 15,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    fontSize: 18,\n    flexGrow: 1,\n    paddingRight: 15\n  },\n  clearIcon: {\n    paddingRight: 9,\n    backgroundColor: 'transparent',\n    marginTop: 2\n  }\n});","map":{"version":3,"sources":["D:/Documents/DESN2000/app_stuff/node_modules/react-native-ios-kit/src/components/TextField.js"],"names":["React","withTheme","Icon","TextField","clearInput","props","onValueChange","value","placeholder","clearButton","theme","backgroundColor","dividerColor","placeholderColor","primaryColor","textColor","containerStyle","inputStyle","rest","borderBottomColor","styles","container","input","color","clearIcon","Component","StyleSheet","create","paddingVertical","paddingHorizontal","borderBottomWidth","hairlineWidth","flexDirection","alignItems","fontSize","flexGrow","paddingRight","marginTop"],"mappings":";;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAGA,SAASC,SAAT;AACA,OAAOC,IAAP;;IAkBMC,S;;;;;;;;;;;;;;;;UACJC,U,GAAa;AAAA,aAAM,MAAKC,KAAL,CAAWC,aAAX,IAA4B,MAAKD,KAAL,CAAWC,aAAX,CAAyB,EAAzB,CAAlC;AAAA,K;;;;;;;6BAEJ;AAAA,wBAgBH,KAAKD,KAhBF;AAAA,UAELE,KAFK,eAELA,KAFK;AAAA,UAGLC,WAHK,eAGLA,WAHK;AAAA,UAILF,aAJK,eAILA,aAJK;AAAA,UAKLG,WALK,eAKLA,WALK;AAAA,0CAMLC,KANK;AAAA,UAOHC,eAPG,qBAOHA,eAPG;AAAA,UAQHC,YARG,qBAQHA,YARG;AAAA,UASHC,gBATG,qBASHA,gBATG;AAAA,UAUHC,YAVG,qBAUHA,YAVG;AAAA,UAWHC,SAXG,qBAWHA,SAXG;AAAA,UAaLC,cAbK,eAaLA,cAbK;AAAA,UAcLC,UAdK,eAcLA,UAdK;AAAA,UAeFC,IAfE;;AAiBP,aACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CACL;AAAEP,UAAAA,eAAe,EAAfA,eAAF;AAAmBQ,UAAAA,iBAAiB,EAAEP;AAAtC,SADK,EAELQ,MAAM,CAACC,SAFF,EAGLL,cAHK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOE,oBAAC,SAAD,eACME,IADN;AAEE,QAAA,KAAK,EAAEX,KAFT;AAGE,QAAA,WAAW,EAAEC,WAHf;AAIE,QAAA,oBAAoB,EAAEK,gBAJxB;AAKE,QAAA,YAAY,EAAEP,aALhB;AAME,QAAA,KAAK,EAAE,CAACc,MAAM,CAACE,KAAR,EAAe;AAAEC,UAAAA,KAAK,EAAER;AAAT,SAAf,EAAqCE,UAArC,CANT;AAOE,QAAA,cAAc,EAAEH,YAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAPF,EAgBGP,KAAK,IAAIE,WAAW,KAAK,KAAzB,GACC,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,KAAKL,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AACE,QAAA,IAAI,EAAC,kBADP;AAEE,QAAA,KAAK,EAAES,gBAFT;AAGE,QAAA,KAAK,EAAEO,MAAM,CAACI,SAHhB;AAIE,QAAA,IAAI,EAAE,EAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADD,GASG,IAzBN,CADF;AA6BD;;;;EAjDqBxB,KAAK,CAACyB,S;;AAoD9B,eAAexB,SAAS,CAACE,SAAD,CAAxB;AAEA,IAAMiB,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,eAAe,EAAE,EADR;AAETC,IAAAA,iBAAiB,EAAE,EAFV;AAGTC,IAAAA,iBAAiB,EAAEJ,UAAU,CAACK,aAHrB;AAITC,IAAAA,aAAa,EAAE,KAJN;AAKTC,IAAAA,UAAU,EAAE;AALH,GADoB;AAQ/BX,EAAAA,KAAK,EAAE;AACLY,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,QAAQ,EAAE,CAFL;AAGLC,IAAAA,YAAY,EAAE;AAHT,GARwB;AAa/BZ,EAAAA,SAAS,EAAE;AACTY,IAAAA,YAAY,EAAE,CADL;AAETzB,IAAAA,eAAe,EAAE,aAFR;AAGT0B,IAAAA,SAAS,EAAE;AAHF;AAboB,CAAlB,CAAf","sourcesContent":["/* @flow */\r\nimport * as React from 'react';\r\nimport { View, TextInput, StyleSheet, TouchableOpacity } from 'react-native';\r\n\r\nimport { withTheme } from '../';\r\nimport Icon from './Icon';\r\n\r\nimport type { Theme } from '../types/Theme';\r\nimport type {\r\n  TextStyleProp,\r\n  ViewStyleProp,\r\n} from 'react-native/Libraries/StyleSheet/StyleSheet';\r\n\r\ntype Props = {\r\n  theme: Theme,\r\n  placeholder?: string,\r\n  value: string,\r\n  clearButton?: boolean,\r\n  onValueChange?: (text: string) => void,\r\n  containerStyle?: ViewStyleProp,\r\n  inputStyle?: TextStyleProp,\r\n};\r\n\r\nclass TextField extends React.Component<Props> {\r\n  clearInput = () => this.props.onValueChange && this.props.onValueChange('');\r\n\r\n  render() {\r\n    const {\r\n      value,\r\n      placeholder,\r\n      onValueChange,\r\n      clearButton,\r\n      theme: {\r\n        backgroundColor,\r\n        dividerColor,\r\n        placeholderColor,\r\n        primaryColor,\r\n        textColor,\r\n      },\r\n      containerStyle,\r\n      inputStyle,\r\n      ...rest\r\n    } = this.props;\r\n    return (\r\n      <View\r\n        style={[\r\n          { backgroundColor, borderBottomColor: dividerColor },\r\n          styles.container,\r\n          containerStyle,\r\n        ]}\r\n      >\r\n        <TextInput\r\n          {...rest}\r\n          value={value}\r\n          placeholder={placeholder}\r\n          placeholderTextColor={placeholderColor}\r\n          onChangeText={onValueChange}\r\n          style={[styles.input, { color: textColor }, inputStyle]}\r\n          selectionColor={primaryColor}\r\n        />\r\n        {value && clearButton !== false ? (\r\n          <TouchableOpacity onPress={this.clearInput}>\r\n            <Icon\r\n              name=\"ios-close-circle\"\r\n              color={placeholderColor}\r\n              style={styles.clearIcon}\r\n              size={18}\r\n            />\r\n          </TouchableOpacity>\r\n        ) : null}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTheme(TextField);\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    paddingVertical: 12,\r\n    paddingHorizontal: 15,\r\n    borderBottomWidth: StyleSheet.hairlineWidth,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  input: {\r\n    fontSize: 18,\r\n    flexGrow: 1,\r\n    paddingRight: 15,\r\n  },\r\n  clearIcon: {\r\n    paddingRight: 9,\r\n    backgroundColor: 'transparent',\r\n    marginTop: 2,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}