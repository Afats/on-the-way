{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Documents\\\\DESN2000\\\\app_stuff\\\\node_modules\\\\react-native-ios-kit\\\\src\\\\components\\\\SegmentedControl.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport SegmentedControlIOS from \"react-native-web/dist/exports/SegmentedControlIOS\";\nimport { withTheme } from \"../core/theming\";\n\nvar SegmentedControl = function (_React$Component) {\n  _inherits(SegmentedControl, _React$Component);\n\n  var _super = _createSuper(SegmentedControl);\n\n  function SegmentedControl() {\n    var _this;\n\n    _classCallCheck(this, SegmentedControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onValueChange = function (e) {\n      return _this.props.onValueChange && _this.props.onValueChange(e.nativeEvent.value, e.nativeEvent.selectedSegmentIndex);\n    };\n\n    return _this;\n  }\n\n  _createClass(SegmentedControl, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          selectedIndex = _this$props.selectedIndex,\n          values = _this$props.values,\n          rest = _objectWithoutProperties(_this$props, [\"theme\", \"selectedIndex\", \"values\"]);\n\n      return React.createElement(SegmentedControlIOS, _extends({\n        tintColor: theme.primaryColor\n      }, rest, {\n        values: values,\n        selectedIndex: selectedIndex,\n        onChange: this.onValueChange,\n        onValueChange: undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return SegmentedControl;\n}(React.Component);\n\nexport default withTheme(SegmentedControl);","map":{"version":3,"sources":["D:/Documents/DESN2000/app_stuff/node_modules/react-native-ios-kit/src/components/SegmentedControl.js"],"names":["React","withTheme","SegmentedControl","onValueChange","e","props","nativeEvent","value","selectedSegmentIndex","theme","selectedIndex","values","rest","primaryColor","undefined","Component"],"mappings":";;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAGA,SAASC,SAAT;;IAuBMC,gB;;;;;;;;;;;;;;;;UACJC,a,GAAgB,UAAAC,CAAC;AAAA,aACf,MAAKC,KAAL,CAAWF,aAAX,IACA,MAAKE,KAAL,CAAWF,aAAX,CACEC,CAAC,CAACE,WAAF,CAAcC,KADhB,EAEEH,CAAC,CAACE,WAAF,CAAcE,oBAFhB,CAFe;AAAA,K;;;;;;;6BAOR;AAAA,wBAC2C,KAAKH,KADhD;AAAA,UACCI,KADD,eACCA,KADD;AAAA,UACQC,aADR,eACQA,aADR;AAAA,UACuBC,MADvB,eACuBA,MADvB;AAAA,UACkCC,IADlC;;AAEP,aACE,oBAAC,mBAAD;AACE,QAAA,SAAS,EAAEH,KAAK,CAACI;AADnB,SAEMD,IAFN;AAGE,QAAA,MAAM,EAAED,MAHV;AAIE,QAAA,aAAa,EAAED,aAJjB;AAKE,QAAA,QAAQ,EAAE,KAAKP,aALjB;AAME,QAAA,aAAa,EAAEW,SANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAUD;;;;EApB4Bd,KAAK,CAACe,S;;AAuBrC,eAAed,SAAS,CAACC,gBAAD,CAAxB","sourcesContent":["/* @flow */\r\nimport * as React from 'react';\r\nimport { SegmentedControlIOS } from 'react-native';\r\n\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types/Theme';\r\n\r\ntype Props = {\r\n  theme: Theme,\r\n  /**\r\n   * Provided by the ThemeProvider\r\n   */\r\n  values: Array<string>,\r\n  /**\r\n   * onValueChange event handler\r\n   */\r\n  onValueChange?: (value: string, index: number) => void,\r\n  /**\r\n   * Index of selected value\r\n   */\r\n  selectedIndex: number,\r\n  /**\r\n   * Optional color of selected control. Defaults to theme's primary color\r\n   */\r\n  tintColor?: string,\r\n};\r\n\r\nclass SegmentedControl extends React.Component<Props> {\r\n  onValueChange = e =>\r\n    this.props.onValueChange &&\r\n    this.props.onValueChange(\r\n      e.nativeEvent.value,\r\n      e.nativeEvent.selectedSegmentIndex\r\n    );\r\n\r\n  render() {\r\n    const { theme, selectedIndex, values, ...rest } = this.props;\r\n    return (\r\n      <SegmentedControlIOS\r\n        tintColor={theme.primaryColor}\r\n        {...rest}\r\n        values={values}\r\n        selectedIndex={selectedIndex}\r\n        onChange={this.onValueChange}\r\n        onValueChange={undefined}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTheme(SegmentedControl);\r\n"]},"metadata":{},"sourceType":"module"}