{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Documents\\\\DESN2000\\\\app_stuff\\\\node_modules\\\\react-native-ios-kit\\\\src\\\\components\\\\Avatar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { withTheme } from \"../\";\n\nvar Avatar = function (_React$Component) {\n  _inherits(Avatar, _React$Component);\n\n  var _super = _createSuper(Avatar);\n\n  function Avatar() {\n    var _this;\n\n    _classCallCheck(this, Avatar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.avatarStyles = {\n      width: _this.props.size,\n      height: _this.props.size,\n      borderRadius: _this.props.size / 2\n    };\n\n    _this.renderTouchableAvatar = function () {\n      return React.createElement(TouchableOpacity, {\n        style: _this.avatarStyles,\n        onPress: _this.props.onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }\n      }, _this.renderAvatar());\n    };\n\n    _this.renderAvatar = function () {\n      var _this$props = _this.props,\n          url = _this$props.url,\n          style = _this$props.style,\n          initials = _this$props.initials,\n          size = _this$props.size;\n\n      if (url) {\n        return React.createElement(Image, {\n          style: _this.avatarStyles,\n          source: {\n            uri: url\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 14\n          }\n        });\n      }\n\n      var overlay = require(\"../assets/avatartGradient.png\");\n\n      return React.createElement(ImageBackground, {\n        imageStyle: _this.avatarStyles,\n        style: [_this.avatarStyles, style],\n        source: overlay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: [styles.letterWrapper, {\n          height: size,\n          width: size,\n          borderRadius: size / 2\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: [styles.letters, {\n          fontSize: size / 2.4\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, initials.slice(0, 2))));\n    };\n\n    return _this;\n  }\n\n  _createClass(Avatar, [{\n    key: \"render\",\n    value: function render() {\n      var onPress = this.props.onPress;\n      if (onPress) return this.renderTouchableAvatar();\n      return this.renderAvatar();\n    }\n  }]);\n\n  return Avatar;\n}(React.Component);\n\nAvatar.defaultProps = {\n  initials: '',\n  size: 50\n};\nexport default withTheme(Avatar);\nvar styles = StyleSheet.create({\n  letterWrapper: {\n    justifyContent: 'center',\n    backgroundColor: 'transparent'\n  },\n  letters: {\n    fontFamily: 'ArialRoundedMTBold',\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["D:/Documents/DESN2000/app_stuff/node_modules/react-native-ios-kit/src/components/Avatar.js"],"names":["React","withTheme","Avatar","avatarStyles","width","props","size","height","borderRadius","renderTouchableAvatar","onPress","renderAvatar","url","style","initials","uri","overlay","require","styles","letterWrapper","letters","fontSize","slice","Component","defaultProps","StyleSheet","create","justifyContent","backgroundColor","fontFamily","textAlign","color"],"mappings":";;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;;;AAWA,SAASC,SAAT;;IAYMC,M;;;;;;;;;;;;;;;UAKJC,Y,GAAe;AACbC,MAAAA,KAAK,EAAE,MAAKC,KAAL,CAAWC,IADL;AAEbC,MAAAA,MAAM,EAAE,MAAKF,KAAL,CAAWC,IAFN;AAGbE,MAAAA,YAAY,EAAE,MAAKH,KAAL,CAAWC,IAAX,GAAkB;AAHnB,K;;UAMfG,qB,GAAwB,YAAM;AAC5B,aACE,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAE,MAAKN,YAA9B;AAA4C,QAAA,OAAO,EAAE,MAAKE,KAAL,CAAWK,OAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,MAAKC,YAAL,EADH,CADF;AAKD,K;;UAEDA,Y,GAAe,YAAM;AAAA,wBACoB,MAAKN,KADzB;AAAA,UACXO,GADW,eACXA,GADW;AAAA,UACNC,KADM,eACNA,KADM;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWR,IADX,eACWA,IADX;;AAGnB,UAAIM,GAAJ,EAAS;AACP,eAAO,oBAAC,KAAD;AAAO,UAAA,KAAK,EAAE,MAAKT,YAAnB;AAAiC,UAAA,MAAM,EAAE;AAAEY,YAAAA,GAAG,EAAEH;AAAP,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,UAAMI,OAAO,GAAGC,OAAO,iCAAvB;;AACA,aACE,oBAAC,eAAD;AACE,QAAA,UAAU,EAAE,MAAKd,YADnB;AAEE,QAAA,KAAK,EAAE,CAAC,MAAKA,YAAN,EAAoBU,KAApB,CAFT;AAGE,QAAA,MAAM,EAAEG,OAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CACLE,MAAM,CAACC,aADF,EAEL;AACEZ,UAAAA,MAAM,EAAED,IADV;AAEEF,UAAAA,KAAK,EAAEE,IAFT;AAGEE,UAAAA,YAAY,EAAEF,IAAI,GAAG;AAHvB,SAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACY,MAAM,CAACE,OAAR,EAAiB;AAAEC,UAAAA,QAAQ,EAAEf,IAAI,GAAG;AAAnB,SAAjB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGQ,QAAQ,CAACQ,KAAT,CAAe,CAAf,EAAkB,CAAlB,CADH,CAVF,CALF,CADF;AAsBD,K;;;;;;;6BAEQ;AAAA,UACCZ,OADD,GACa,KAAKL,KADlB,CACCK,OADD;AAEP,UAAIA,OAAJ,EAAa,OAAO,KAAKD,qBAAL,EAAP;AACb,aAAO,KAAKE,YAAL,EAAP;AACD;;;;EAtDkBX,KAAK,CAACuB,S;;AAArBrB,M,CACGsB,Y,GAAe;AACpBV,EAAAA,QAAQ,EAAE,EADU;AAEpBR,EAAAA,IAAI,EAAE;AAFc,C;AAwDxB,eAAeL,SAAS,CAACC,MAAD,CAAxB;AAEA,IAAMgB,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC/BP,EAAAA,aAAa,EAAE;AACbQ,IAAAA,cAAc,EAAE,QADH;AAEbC,IAAAA,eAAe,EAAE;AAFJ,GADgB;AAK/BR,EAAAA,OAAO,EAAE;AACPS,IAAAA,UAAU,EAAE,oBADL;AAEPC,IAAAA,SAAS,EAAE,QAFJ;AAGPF,IAAAA,eAAe,EAAE,aAHV;AAIPG,IAAAA,KAAK,EAAE;AAJA;AALsB,CAAlB,CAAf","sourcesContent":["/* @flow */\r\nimport * as React from 'react';\r\nimport {\r\n  StyleSheet,\r\n  Image,\r\n  ImageBackground,\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n} from 'react-native';\r\n\r\nimport type { Theme } from '../types/Theme';\r\nimport { withTheme } from '../';\r\nimport type { ViewStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\r\n\r\ntype Props = {\r\n  theme: Theme,\r\n  initials: string,\r\n  url?: string,\r\n  size: number,\r\n  style?: ViewStyleProp,\r\n  onPress?: (e: *) => void,\r\n};\r\n\r\nclass Avatar extends React.Component<Props> {\r\n  static defaultProps = {\r\n    initials: '',\r\n    size: 50,\r\n  };\r\n  avatarStyles = {\r\n    width: this.props.size,\r\n    height: this.props.size,\r\n    borderRadius: this.props.size / 2,\r\n  };\r\n\r\n  renderTouchableAvatar = () => {\r\n    return (\r\n      <TouchableOpacity style={this.avatarStyles} onPress={this.props.onPress}>\r\n        {this.renderAvatar()}\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  renderAvatar = () => {\r\n    const { url, style, initials, size } = this.props;\r\n\r\n    if (url) {\r\n      return <Image style={this.avatarStyles} source={{ uri: url }} />;\r\n    }\r\n    const overlay = require('../assets/avatartGradient.png');\r\n    return (\r\n      <ImageBackground\r\n        imageStyle={this.avatarStyles}\r\n        style={[this.avatarStyles, style]}\r\n        source={overlay}\r\n      >\r\n        <View\r\n          style={[\r\n            styles.letterWrapper,\r\n            {\r\n              height: size,\r\n              width: size,\r\n              borderRadius: size / 2,\r\n            },\r\n          ]}\r\n        >\r\n          <Text style={[styles.letters, { fontSize: size / 2.4 }]}>\r\n            {initials.slice(0, 2)}\r\n          </Text>\r\n        </View>\r\n      </ImageBackground>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { onPress } = this.props;\r\n    if (onPress) return this.renderTouchableAvatar();\r\n    return this.renderAvatar();\r\n  }\r\n}\r\n\r\nexport default withTheme(Avatar);\r\n\r\nconst styles = StyleSheet.create({\r\n  letterWrapper: {\r\n    justifyContent: 'center',\r\n    backgroundColor: 'transparent',\r\n  },\r\n  letters: {\r\n    fontFamily: 'ArialRoundedMTBold',\r\n    textAlign: 'center',\r\n    backgroundColor: 'transparent',\r\n    color: 'white',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}