{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Documents\\\\DESN2000\\\\app_stuff\\\\node_modules\\\\react-native-ios-kit\\\\src\\\\components\\\\Toolbar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Icon from \"./Icon\";\nimport { Caption2 } from \"./Typography\";\nimport { withTheme } from \"../\";\n\nvar Toolbar = function (_PureComponent) {\n  _inherits(Toolbar, _PureComponent);\n\n  var _super = _createSuper(Toolbar);\n\n  function Toolbar() {\n    _classCallCheck(this, Toolbar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Toolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$theme = _this$props.theme,\n          barColor = _this$props$theme.barColor,\n          dividerColor = _this$props$theme.dividerColor,\n          primaryColor = _this$props$theme.primaryColor,\n          disabledColor = _this$props$theme.disabledColor,\n          items = _this$props.items;\n      var toolbarStyle = {\n        backgroundColor: barColor,\n        borderTopColor: dividerColor\n      };\n\n      var _Dimensions$get = Dimensions.get('window'),\n          width = _Dimensions$get.width;\n\n      return React.createElement(View, {\n        style: [styles.wrapper, toolbarStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }\n      }, items.map(function (item, idx) {\n        return React.createElement(TouchableWithoutFeedback, {\n          key: \"toolbarItem_\" + idx,\n          onPress: function onPress() {\n            return item.onPress(idx);\n          },\n          disabled: item.disabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }\n        }, React.createElement(View, {\n          style: [styles.toolbarItem, {\n            width: width / items.length\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }\n        }, item.icon && React.createElement(Icon, {\n          name: item.icon,\n          size: 30,\n          color: item.disabled ? disabledColor : primaryColor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }\n        }), item.title && React.createElement(Caption2, {\n          style: {\n            color: item.disabled ? disabledColor : primaryColor\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }\n        }, item.title)));\n      }));\n    }\n  }]);\n\n  return Toolbar;\n}(PureComponent);\n\nexport default withTheme(Toolbar);\nvar styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    flexDirection: 'row',\n    borderTopWidth: 1\n  },\n  toolbarItem: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: 4\n  }\n});","map":{"version":3,"sources":["D:/Documents/DESN2000/app_stuff/node_modules/react-native-ios-kit/src/components/Toolbar.js"],"names":["React","PureComponent","Icon","Caption2","withTheme","Toolbar","props","theme","barColor","dividerColor","primaryColor","disabledColor","items","toolbarStyle","backgroundColor","borderTopColor","Dimensions","get","width","styles","wrapper","map","item","idx","onPress","disabled","toolbarItem","length","icon","title","color","StyleSheet","create","position","bottom","left","right","flexDirection","borderTopWidth","justifyContent","alignItems","paddingVertical"],"mappings":";;;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;;;;AAQA,OAAOC,IAAP;AACA,SAASC,QAAT;AACA,SAASC,SAAT;;IAyBMC,O;;;;;;;;;;;;;6BACK;AAAA,wBAIH,KAAKC,KAJF;AAAA,0CAELC,KAFK;AAAA,UAEIC,QAFJ,qBAEIA,QAFJ;AAAA,UAEcC,YAFd,qBAEcA,YAFd;AAAA,UAE4BC,YAF5B,qBAE4BA,YAF5B;AAAA,UAE0CC,aAF1C,qBAE0CA,aAF1C;AAAA,UAGLC,KAHK,eAGLA,KAHK;AAKP,UAAMC,YAAY,GAAG;AACnBC,QAAAA,eAAe,EAAEN,QADE;AAEnBO,QAAAA,cAAc,EAAEN;AAFG,OAArB;;AALO,4BASWO,UAAU,CAACC,GAAX,CAAe,QAAf,CATX;AAAA,UASCC,KATD,mBASCA,KATD;;AAUP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACC,MAAM,CAACC,OAAR,EAAiBP,YAAjB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,KAAK,CAACS,GAAN,CAAU,UAACC,IAAD,EAAOC,GAAP;AAAA,eACT,oBAAC,wBAAD;AAEE,UAAA,GAAG,mBAAiBA,GAFtB;AAGE,UAAA,OAAO,EAAE;AAAA,mBAAMD,IAAI,CAACE,OAAL,CAAaD,GAAb,CAAN;AAAA,WAHX;AAIE,UAAA,QAAQ,EAAED,IAAI,CAACG,QAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAME,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE,CAACN,MAAM,CAACO,WAAR,EAAqB;AAAER,YAAAA,KAAK,EAAEA,KAAK,GAAGN,KAAK,CAACe;AAAvB,WAArB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGL,IAAI,CAACM,IAAL,IACC,oBAAC,IAAD;AACE,UAAA,IAAI,EAAEN,IAAI,CAACM,IADb;AAEE,UAAA,IAAI,EAAE,EAFR;AAGE,UAAA,KAAK,EAAEN,IAAI,CAACG,QAAL,GAAgBd,aAAhB,GAAgCD,YAHzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,EAQGY,IAAI,CAACO,KAAL,IACC,oBAAC,QAAD;AACE,UAAA,KAAK,EAAE;AACLC,YAAAA,KAAK,EAAER,IAAI,CAACG,QAAL,GAAgBd,aAAhB,GAAgCD;AADlC,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKGY,IAAI,CAACO,KALR,CATJ,CANF,CADS;AAAA,OAAV,CADH,CADF;AA+BD;;;;EA1CmB5B,a;;AA6CtB,eAAeG,SAAS,CAACC,OAAD,CAAxB;AAEA,IAAMc,MAAM,GAAGY,UAAU,CAACC,MAAX,CAAkB;AAC/BZ,EAAAA,OAAO,EAAE;AACPa,IAAAA,QAAQ,EAAE,UADH;AAEPC,IAAAA,MAAM,EAAE,CAFD;AAGPC,IAAAA,IAAI,EAAE,CAHC;AAIPC,IAAAA,KAAK,EAAE,CAJA;AAKPC,IAAAA,aAAa,EAAE,KALR;AAMPC,IAAAA,cAAc,EAAE;AANT,GADsB;AAS/BZ,EAAAA,WAAW,EAAE;AACXa,IAAAA,cAAc,EAAE,QADL;AAEXC,IAAAA,UAAU,EAAE,QAFD;AAGXC,IAAAA,eAAe,EAAE;AAHN;AATkB,CAAlB,CAAf","sourcesContent":["/* @flow */\r\nimport React, { PureComponent } from 'react';\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  TouchableWithoutFeedback,\r\n  Dimensions,\r\n} from 'react-native';\r\n\r\nimport Icon from './Icon';\r\nimport { Caption2 } from './Typography';\r\nimport { withTheme } from '../';\r\nimport type { Theme } from '../types/Theme';\r\n\r\ntype ToolbarItem = {\r\n  icon?: string,\r\n  title?: string,\r\n  onPress: (itemIndex: number) => void,\r\n  disabled?: boolean,\r\n};\r\n\r\ntype Props = {\r\n  /**\r\n   * Array of Items. Each ToolbarItem needs to have below shape:\r\n   * icon: Icon name, one of https://github.com/oblador/react-native-vector-icons/blob/master/glyphmaps/Ionicons.json\r\n   * title: string,\r\n   * onPress: function to be called when Item is tapped\r\n   * disabled?: boolean, (optional), diasables an Item\r\n   */\r\n  items: Array<ToolbarItem>,\r\n  /**\r\n   * Provided by the ThemeProvider\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\nclass Toolbar extends PureComponent<Props> {\r\n  render() {\r\n    const {\r\n      theme: { barColor, dividerColor, primaryColor, disabledColor },\r\n      items,\r\n    } = this.props;\r\n    const toolbarStyle = {\r\n      backgroundColor: barColor,\r\n      borderTopColor: dividerColor,\r\n    };\r\n    const { width } = Dimensions.get('window');\r\n    return (\r\n      <View style={[styles.wrapper, toolbarStyle]}>\r\n        {items.map((item, idx) => (\r\n          <TouchableWithoutFeedback\r\n            // eslint-disable-next-line\r\n            key={`toolbarItem_${idx}`}\r\n            onPress={() => item.onPress(idx)}\r\n            disabled={item.disabled}\r\n          >\r\n            <View style={[styles.toolbarItem, { width: width / items.length }]}>\r\n              {item.icon && (\r\n                <Icon\r\n                  name={item.icon}\r\n                  size={30}\r\n                  color={item.disabled ? disabledColor : primaryColor}\r\n                />\r\n              )}\r\n              {item.title && (\r\n                <Caption2\r\n                  style={{\r\n                    color: item.disabled ? disabledColor : primaryColor,\r\n                  }}\r\n                >\r\n                  {item.title}\r\n                </Caption2>\r\n              )}\r\n            </View>\r\n          </TouchableWithoutFeedback>\r\n        ))}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTheme(Toolbar);\r\n\r\nconst styles = StyleSheet.create({\r\n  wrapper: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    left: 0,\r\n    right: 0,\r\n    flexDirection: 'row',\r\n    borderTopWidth: 1,\r\n  },\r\n  toolbarItem: {\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    paddingVertical: 4,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}