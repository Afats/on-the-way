{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Documents\\\\DESN2000\\\\app_stuff\\\\node_modules\\\\react-native-ios-kit\\\\src\\\\components\\\\Typography\\\\StyledText.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../\";\n\nvar trackingToSpacing = function trackingToSpacing(fontSize, tracking) {\n  return fontSize * tracking / 1000;\n};\n\nvar resolveFontSizeFromStyle = function resolveFontSizeFromStyle(style) {\n  if (!style) {\n    return 0;\n  }\n\n  if (Array.isArray(style)) {\n    return style.reduce(function (acc, elem) {\n      return resolveFontSizeFromStyle(elem) || acc;\n    }, 0);\n  }\n\n  var realStyle = typeof style === 'number' ? StyleSheet.flatten(style) : style;\n  return realStyle ? realStyle.fontSize : null;\n};\n\nvar StyledText = function (_React$Component) {\n  _inherits(StyledText, _React$Component);\n\n  var _super = _createSuper(StyledText);\n\n  function StyledText() {\n    _classCallCheck(this, StyledText);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(StyledText, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          children = _this$props.children,\n          config = _this$props.config,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"children\", \"config\", \"theme\"]);\n\n      var fontSize = resolveFontSizeFromStyle(style) || config.fontSize;\n      var letterSpacing = trackingToSpacing(fontSize, config.tracking);\n      var calculatedStyle = {\n        fontSize: fontSize,\n        fontWeight: config.fontWeight,\n        letterSpacing: letterSpacing,\n        lineHeight: config.leading,\n        color: theme.textColor\n      };\n      return React.createElement(Text, _extends({\n        style: [calculatedStyle, style]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }\n      }), children);\n    }\n  }]);\n\n  return StyledText;\n}(React.Component);\n\nexport default withTheme(StyledText);","map":{"version":3,"sources":["D:/Documents/DESN2000/app_stuff/node_modules/react-native-ios-kit/src/components/Typography/StyledText.js"],"names":["React","withTheme","trackingToSpacing","fontSize","tracking","resolveFontSizeFromStyle","style","Array","isArray","reduce","acc","elem","realStyle","StyleSheet","flatten","StyledText","props","children","config","theme","rest","letterSpacing","calculatedStyle","fontWeight","lineHeight","leading","color","textColor","Component"],"mappings":";;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAGA,SAASC,SAAT;;AAIA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAmBC,QAAnB;AAAA,SACvBD,QAAQ,GAAGC,QAAZ,GAAwB,IADA;AAAA,CAA1B;;AAGA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,KAAD,EAA2B;AAC1D,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,CAAP;AACD;;AAED,MAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxB,WAAOA,KAAK,CAACG,MAAN,CACL,UAACC,GAAD,EAAMC,IAAN;AAAA,aAAeN,wBAAwB,CAACM,IAAD,CAAxB,IAAkCD,GAAjD;AAAA,KADK,EAEL,CAFK,CAAP;AAID;;AAED,MAAME,SAAS,GACb,OAAON,KAAP,KAAiB,QAAjB,GAA4BO,UAAU,CAACC,OAAX,CAAmBR,KAAnB,CAA5B,GAAwDA,KAD1D;AAGA,SAAOM,SAAS,GAAGA,SAAS,CAACT,QAAb,GAAwB,IAAxC;AACD,CAhBD;;IAyBMY,U;;;;;;;;;;;;;6BACK;AAAA,wBAC6C,KAAKC,KADlD;AAAA,UACCV,KADD,eACCA,KADD;AAAA,UACQW,QADR,eACQA,QADR;AAAA,UACkBC,MADlB,eACkBA,MADlB;AAAA,UAC0BC,KAD1B,eAC0BA,KAD1B;AAAA,UACoCC,IADpC;;AAEP,UAAMjB,QAAQ,GAAGE,wBAAwB,CAACC,KAAD,CAAxB,IAAmCY,MAAM,CAACf,QAA3D;AACA,UAAMkB,aAAa,GAAGnB,iBAAiB,CAACC,QAAD,EAAWe,MAAM,CAACd,QAAlB,CAAvC;AAEA,UAAMkB,eAAe,GAAG;AACtBnB,QAAAA,QAAQ,EAARA,QADsB;AAEtBoB,QAAAA,UAAU,EAAEL,MAAM,CAACK,UAFG;AAGtBF,QAAAA,aAAa,EAAbA,aAHsB;AAItBG,QAAAA,UAAU,EAAEN,MAAM,CAACO,OAJG;AAKtBC,QAAAA,KAAK,EAAEP,KAAK,CAACQ;AALS,OAAxB;AAOA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACL,eAAD,EAAkBhB,KAAlB;AAAb,SAA2Cc,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACGH,QADH,CADF;AAKD;;;;EAlBsBjB,KAAK,CAAC4B,S;;AAqB/B,eAAe3B,SAAS,CAACc,UAAD,CAAxB","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport { Text, StyleSheet } from 'react-native';\r\n\r\nimport { withTheme } from '../../';\r\nimport type { Theme } from '../../types/Theme';\r\nimport type { TextStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\r\n\r\nconst trackingToSpacing = (fontSize: number, tracking: number): number =>\r\n  (fontSize * tracking) / 1000;\r\n\r\nconst resolveFontSizeFromStyle = (style?: TextStyleProp) => {\r\n  if (!style) {\r\n    return 0;\r\n  }\r\n\r\n  if (Array.isArray(style)) {\r\n    return style.reduce(\r\n      (acc, elem) => resolveFontSizeFromStyle(elem) || acc,\r\n      0\r\n    );\r\n  }\r\n\r\n  const realStyle =\r\n    typeof style === 'number' ? StyleSheet.flatten(style) : style;\r\n\r\n  return realStyle ? realStyle.fontSize : null;\r\n};\r\n\r\ntype Props = {\r\n  style?: TextStyleProp,\r\n  children?: React.Node,\r\n  config: Object,\r\n  theme: Theme,\r\n};\r\n\r\nclass StyledText extends React.Component<Props> {\r\n  render() {\r\n    const { style, children, config, theme, ...rest } = this.props;\r\n    const fontSize = resolveFontSizeFromStyle(style) || config.fontSize;\r\n    const letterSpacing = trackingToSpacing(fontSize, config.tracking);\r\n\r\n    const calculatedStyle = {\r\n      fontSize,\r\n      fontWeight: config.fontWeight,\r\n      letterSpacing,\r\n      lineHeight: config.leading,\r\n      color: theme.textColor,\r\n    };\r\n    return (\r\n      <Text style={[calculatedStyle, style]} {...rest}>\r\n        {children}\r\n      </Text>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTheme(StyledText);\r\n"]},"metadata":{},"sourceType":"module"}