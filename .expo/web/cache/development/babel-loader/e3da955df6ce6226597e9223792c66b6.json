{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Documents\\\\DESN2000\\\\app_stuff\\\\node_modules\\\\react-native-ios-kit\\\\src\\\\components\\\\TextFieldRow.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RowItem from \"./RowItem\";\nimport { withTheme } from \"../core/theming\";\n\nvar TextFieldRow = function (_React$Component) {\n  _inherits(TextFieldRow, _React$Component);\n\n  var _super = _createSuper(TextFieldRow);\n\n  function TextFieldRow() {\n    var _this;\n\n    _classCallCheck(this, TextFieldRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.input = undefined;\n\n    _this.focusInput = function () {\n      if (_this.input) _this.input.focus();\n    };\n\n    _this.renderRightComponent = function () {\n      var _this$props = _this.props,\n          value = _this$props.value,\n          placeholder = _this$props.placeholder,\n          onValueChange = _this$props.onValueChange,\n          _this$props$theme = _this$props.theme,\n          placeholderColor = _this$props$theme.placeholderColor,\n          primaryColor = _this$props$theme.primaryColor,\n          textColor = _this$props$theme.textColor;\n      return React.createElement(TextInput, {\n        ref: function ref(_ref) {\n          _this.input = _ref;\n        },\n        value: value,\n        placeholder: placeholder,\n        placeholderTextColor: placeholderColor,\n        onChangeText: onValueChange,\n        style: [styles.input, {\n          color: textColor\n        }],\n        selectionColor: primaryColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TextFieldRow, [{\n    key: \"render\",\n    value: function render() {\n      var title = this.props.title;\n      return React.createElement(RowItem, _extends({\n        title: title,\n        renderRight: this.renderRightComponent,\n        onPress: this.focusInput\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return TextFieldRow;\n}(React.Component);\n\nTextFieldRow.defaultProps = {\n  placeholder: ''\n};\nexport default withTheme(TextFieldRow);\nvar styles = StyleSheet.create({\n  input: {\n    flexGrow: 1,\n    fontSize: 18,\n    width: '100%'\n  }\n});","map":{"version":3,"sources":["D:/Documents/DESN2000/app_stuff/node_modules/react-native-ios-kit/src/components/TextFieldRow.js"],"names":["React","RowItem","withTheme","TextFieldRow","input","undefined","focusInput","focus","renderRightComponent","props","value","placeholder","onValueChange","theme","placeholderColor","primaryColor","textColor","ref","styles","color","title","Component","defaultProps","StyleSheet","create","flexGrow","fontSize","width"],"mappings":";;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAGA,OAAOC,OAAP;AACA,SAASC,SAAT;;IAWMC,Y;;;;;;;;;;;;;;;UAIJC,K,GAAQC,S;;UAERC,U,GAAa,YAAM;AACjB,UAAI,MAAKF,KAAT,EAAgB,MAAKA,KAAL,CAAWG,KAAX;AACjB,K;;UAEDC,oB,GAAuB,YAAM;AAAA,wBAMvB,MAAKC,KANkB;AAAA,UAEzBC,KAFyB,eAEzBA,KAFyB;AAAA,UAGzBC,WAHyB,eAGzBA,WAHyB;AAAA,UAIzBC,aAJyB,eAIzBA,aAJyB;AAAA,0CAKzBC,KALyB;AAAA,UAKhBC,gBALgB,qBAKhBA,gBALgB;AAAA,UAKEC,YALF,qBAKEA,YALF;AAAA,UAKgBC,SALhB,qBAKgBA,SALhB;AAO3B,aACE,oBAAC,SAAD;AACE,QAAA,GAAG,EAAE,aAAAC,IAAG,EAAI;AACV,gBAAKb,KAAL,GAAaa,IAAb;AACD,SAHH;AAIE,QAAA,KAAK,EAAEP,KAJT;AAKE,QAAA,WAAW,EAAEC,WALf;AAME,QAAA,oBAAoB,EAAEG,gBANxB;AAOE,QAAA,YAAY,EAAEF,aAPhB;AAQE,QAAA,KAAK,EAAE,CAACM,MAAM,CAACd,KAAR,EAAe;AAAEe,UAAAA,KAAK,EAAEH;AAAT,SAAf,CART;AASE,QAAA,cAAc,EAAED,YATlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAaD,K;;;;;;;6BACQ;AAAA,UACCK,KADD,GACW,KAAKX,KADhB,CACCW,KADD;AAEP,aACE,oBAAC,OAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,WAAW,EAAE,KAAKZ,oBAFpB;AAGE,QAAA,OAAO,EAAE,KAAKF;AAHhB,SAIM,KAAKG,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAQD;;;;EAzCwBT,KAAK,CAACqB,S;;AAA3BlB,Y,CACGmB,Y,GAAe;AACpBX,EAAAA,WAAW,EAAE;AADO,C;AA2CxB,eAAeT,SAAS,CAACC,YAAD,CAAxB;AAEA,IAAMe,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BpB,EAAAA,KAAK,EAAE;AACLqB,IAAAA,QAAQ,EAAE,CADL;AAELC,IAAAA,QAAQ,EAAE,EAFL;AAGLC,IAAAA,KAAK,EAAE;AAHF;AADwB,CAAlB,CAAf","sourcesContent":["/* @flow */\r\nimport * as React from 'react';\r\nimport { TextInput, StyleSheet } from 'react-native';\r\n\r\nimport RowItem from './RowItem';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types/Theme';\r\n\r\ntype Props = {\r\n  theme: Theme,\r\n  title: string,\r\n  value: string,\r\n  placeholder?: string,\r\n  onValueChange: (text: string) => void,\r\n};\r\n\r\nclass TextFieldRow extends React.Component<Props> {\r\n  static defaultProps = {\r\n    placeholder: '',\r\n  };\r\n  input = undefined;\r\n\r\n  focusInput = () => {\r\n    if (this.input) this.input.focus();\r\n  };\r\n\r\n  renderRightComponent = () => {\r\n    const {\r\n      value,\r\n      placeholder,\r\n      onValueChange,\r\n      theme: { placeholderColor, primaryColor, textColor },\r\n    } = this.props;\r\n    return (\r\n      <TextInput\r\n        ref={ref => {\r\n          this.input = ref;\r\n        }}\r\n        value={value}\r\n        placeholder={placeholder}\r\n        placeholderTextColor={placeholderColor}\r\n        onChangeText={onValueChange}\r\n        style={[styles.input, { color: textColor }]}\r\n        selectionColor={primaryColor}\r\n      />\r\n    );\r\n  };\r\n  render() {\r\n    const { title } = this.props;\r\n    return (\r\n      <RowItem\r\n        title={title}\r\n        renderRight={this.renderRightComponent}\r\n        onPress={this.focusInput}\r\n        {...this.props}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTheme(TextFieldRow);\r\n\r\nconst styles = StyleSheet.create({\r\n  input: {\r\n    flexGrow: 1,\r\n    fontSize: 18,\r\n    width: '100%',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}