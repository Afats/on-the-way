{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Documents\\\\DESN2000\\\\app_stuff\\\\node_modules\\\\react-native-ios-kit\\\\src\\\\components\\\\PageControlView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PageControl from \"./PageControl\";\nimport { withTheme } from \"../core/theming\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar PageControlView = function (_React$Component) {\n  _inherits(PageControlView, _React$Component);\n\n  var _super = _createSuper(PageControlView);\n\n  function PageControlView() {\n    var _this;\n\n    _classCallCheck(this, PageControlView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      currentPage: _this.props.startPage || 0\n    };\n    _this.scrollView = undefined;\n\n    _this.handleScroll = function (event) {\n      var xOffset = event.nativeEvent.contentOffset.x + 10;\n      var currentPage = Math.floor(xOffset / width);\n\n      _this.setState({\n        currentPage: currentPage\n      });\n    };\n\n    _this.handleScrollEnd = function (event) {\n      var onPageChange = _this.props.onPageChange;\n      var xOffset = event.nativeEvent.contentOffset.x + 10;\n      var currentPage = Math.floor(xOffset / width);\n\n      if (_this.state.currentPage === currentPage) {\n        if (onPageChange && typeof onPageChange === 'function') onPageChange(_this.state.currentPage);\n      }\n    };\n\n    _this.scrollToPage = function (pageNumber) {\n      if (_this.scrollView) _this.scrollView.scrollTo({\n        x: width * pageNumber\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PageControlView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.startPage) this.scrollToPage(this.props.startPage);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          containerStyle = _this$props.containerStyle,\n          children = _this$props.children,\n          pageIndicatorSize = _this$props.pageIndicatorSize,\n          pageIndicatorTintColor = _this$props.pageIndicatorTintColor,\n          currentPageIndicatorTintColor = _this$props.currentPageIndicatorTintColor;\n      var numberOfPages = React.Children.count(children);\n      return React.createElement(View, {\n        style: [styles.container, containerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }\n      }, React.createElement(ScrollView, {\n        ref: function ref(_ref) {\n          _this2.scrollView = _ref;\n        },\n        automaticallyAdjustContentInsets: false,\n        horizontal: true,\n        snapToInterval: width,\n        decelerationRate: \"fast\",\n        scrollEventThrottle: 16,\n        showsHorizontalScrollIndicator: false,\n        showsVerticalScrollIndicator: false,\n        directionalLockEnabled: true,\n        onScroll: this.handleScroll,\n        onMomentumScrollEnd: this.handleScrollEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }, React.Children.map(children, function (child) {\n        return React.createElement(View, {\n          style: styles.pageStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }\n        }, child);\n      })), React.createElement(View, {\n        style: styles.controlsContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, React.createElement(PageControl, {\n        numberOfPages: numberOfPages,\n        currentPage: this.state.currentPage,\n        updateCurrentPageDisplay: this.scrollToPage,\n        currentPageIndicatorTintColor: currentPageIndicatorTintColor,\n        pageIndicatorTintColor: pageIndicatorTintColor,\n        size: pageIndicatorSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return PageControlView;\n}(React.Component);\n\nexport default withTheme(PageControlView);\nvar styles = StyleSheet.create({\n  container: {\n    position: 'relative'\n  },\n  pageStyle: {\n    width: width\n  },\n  controlsContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["D:/Documents/DESN2000/app_stuff/node_modules/react-native-ios-kit/src/components/PageControlView.js"],"names":["React","PageControl","withTheme","Dimensions","get","width","PageControlView","state","currentPage","props","startPage","scrollView","undefined","handleScroll","event","xOffset","nativeEvent","contentOffset","x","Math","floor","setState","handleScrollEnd","onPageChange","scrollToPage","pageNumber","scrollTo","containerStyle","children","pageIndicatorSize","pageIndicatorTintColor","currentPageIndicatorTintColor","numberOfPages","Children","count","styles","container","ref","map","child","pageStyle","controlsContainer","Component","StyleSheet","create","position","bottom","left","right","backgroundColor"],"mappings":"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","sourcesContent":["/* @flow */\r\nimport * as React from 'react';\r\nimport { View, StyleSheet, ScrollView, Dimensions } from 'react-native';\r\n\r\nimport PageControl from './PageControl';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types/Theme';\r\nimport type { ViewStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\r\nimport type { ScrollEvent } from 'react-native/Libraries/Types/CoreEventTypes';\r\n\r\nconst { width } = Dimensions.get('window');\r\n\r\ntype Props = {\r\n  theme: Theme,\r\n  children: React.Node,\r\n  containerStyle?: ViewStyleProp,\r\n  startPage?: number,\r\n  onPageChange?: number => void,\r\n  currentPageIndicatorTintColor?: string,\r\n  pageIndicatorTintColor?: string,\r\n  pageIndicatorSize?: number,\r\n};\r\n\r\ntype State = {\r\n  currentPage: number,\r\n};\r\n\r\nclass PageControlView extends React.Component<Props, State> {\r\n  state = {\r\n    currentPage: this.props.startPage || 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.startPage) this.scrollToPage(this.props.startPage);\r\n  }\r\n\r\n  scrollView = undefined;\r\n\r\n  handleScroll = (event: ScrollEvent) => {\r\n    const xOffset = event.nativeEvent.contentOffset.x + 10;\r\n    const currentPage = Math.floor(xOffset / width);\r\n    this.setState({ currentPage });\r\n  };\r\n\r\n  handleScrollEnd = (event: ScrollEvent) => {\r\n    const { onPageChange } = this.props;\r\n    const xOffset = event.nativeEvent.contentOffset.x + 10;\r\n    const currentPage = Math.floor(xOffset / width);\r\n    if (this.state.currentPage === currentPage) {\r\n      if (onPageChange && typeof onPageChange === 'function')\r\n        onPageChange(this.state.currentPage);\r\n    }\r\n  };\r\n\r\n  scrollToPage = (pageNumber: number): void => {\r\n    if (this.scrollView) this.scrollView.scrollTo({ x: width * pageNumber });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      containerStyle,\r\n      children,\r\n      pageIndicatorSize,\r\n      pageIndicatorTintColor,\r\n      currentPageIndicatorTintColor,\r\n    } = this.props;\r\n    const numberOfPages = React.Children.count(children);\r\n    return (\r\n      <View style={[styles.container, containerStyle]}>\r\n        <ScrollView\r\n          ref={ref => {\r\n            this.scrollView = ref;\r\n          }}\r\n          automaticallyAdjustContentInsets={false}\r\n          horizontal\r\n          snapToInterval={width}\r\n          decelerationRate=\"fast\"\r\n          scrollEventThrottle={16}\r\n          showsHorizontalScrollIndicator={false}\r\n          showsVerticalScrollIndicator={false}\r\n          directionalLockEnabled\r\n          onScroll={this.handleScroll}\r\n          onMomentumScrollEnd={this.handleScrollEnd}\r\n        >\r\n          {React.Children.map(children, child => (\r\n            <View style={styles.pageStyle}>{child}</View>\r\n          ))}\r\n        </ScrollView>\r\n        <View style={styles.controlsContainer}>\r\n          <PageControl\r\n            numberOfPages={numberOfPages}\r\n            currentPage={this.state.currentPage}\r\n            updateCurrentPageDisplay={this.scrollToPage}\r\n            currentPageIndicatorTintColor={currentPageIndicatorTintColor}\r\n            pageIndicatorTintColor={pageIndicatorTintColor}\r\n            size={pageIndicatorSize}\r\n          />\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTheme(PageControlView);\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    position: 'relative',\r\n  },\r\n  pageStyle: {\r\n    width,\r\n  },\r\n  controlsContainer: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    left: 0,\r\n    right: 0,\r\n    backgroundColor: 'transparent',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}