{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Documents\\\\DESN2000\\\\app_stuff\\\\node_modules\\\\react-native-ios-kit\\\\src\\\\components\\\\InfoRow.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport RowItem from \"./RowItem\";\nimport { Body } from \"./Typography\";\nimport { withTheme } from \"../core/theming\";\n\nvar InfoRow = function (_React$Component) {\n  _inherits(InfoRow, _React$Component);\n\n  var _super = _createSuper(InfoRow);\n\n  function InfoRow() {\n    var _this;\n\n    _classCallCheck(this, InfoRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.renderRight = function () {\n      var _this$props = _this.props,\n          info = _this$props.info,\n          placeholderColor = _this$props.theme.placeholderColor;\n      return React.createElement(Body, {\n        style: {\n          color: placeholderColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 12\n        }\n      }, info);\n    };\n\n    return _this;\n  }\n\n  _createClass(InfoRow, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(RowItem, _extends({\n        renderRight: this.renderRight\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n\n  return InfoRow;\n}(React.Component);\n\nexport default withTheme(InfoRow);","map":{"version":3,"sources":["D:/Documents/DESN2000/app_stuff/node_modules/react-native-ios-kit/src/components/InfoRow.js"],"names":["React","RowItem","Body","withTheme","InfoRow","renderRight","props","info","placeholderColor","theme","color","Component"],"mappings":";;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,OAAP;AACA,SAASC,IAAT;AACA,SAASC,SAAT;;IAOMC,O;;;;;;;;;;;;;;;;UACJC,W,GAAc,YAAM;AAAA,wBAId,MAAKC,KAJS;AAAA,UAEhBC,IAFgB,eAEhBA,IAFgB;AAAA,UAGPC,gBAHO,eAGhBC,KAHgB,CAGPD,gBAHO;AAKlB,aAAO,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEE,UAAAA,KAAK,EAAEF;AAAT,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2CD,IAA3C,CAAP;AACD,K;;;;;;;6BAEQ;AACP,aAAO,oBAAC,OAAD;AAAS,QAAA,WAAW,EAAE,KAAKF;AAA3B,SAA4C,KAAKC,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAXmBN,KAAK,CAACW,S;;AAc5B,eAAeR,SAAS,CAACC,OAAD,CAAxB","sourcesContent":["/* @flow */\r\nimport * as React from 'react';\r\n\r\nimport RowItem from './RowItem';\r\nimport { Body } from './Typography';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Props as RowProps } from './RowItem';\r\n\r\ntype Props = RowProps & {\r\n  info: string,\r\n};\r\n\r\nclass InfoRow extends React.Component<Props> {\r\n  renderRight = () => {\r\n    const {\r\n      info,\r\n      theme: { placeholderColor },\r\n    } = this.props;\r\n    return <Body style={{ color: placeholderColor }}>{info}</Body>;\r\n  };\r\n\r\n  render() {\r\n    return <RowItem renderRight={this.renderRight} {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default withTheme(InfoRow);\r\n"]},"metadata":{},"sourceType":"module"}